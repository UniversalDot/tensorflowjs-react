{"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { stringToChars } from '../util';\r\nvar TrieNode = /** @class */ (function () {\r\n    function TrieNode() {\r\n        this.parent = null;\r\n        this.children = {};\r\n        this.end = false;\r\n        this.word = [[], 0, 0];\r\n    }\r\n    return TrieNode;\r\n}());\r\nvar Trie = /** @class */ (function () {\r\n    function Trie() {\r\n        this.root = new TrieNode();\r\n    }\r\n    /**\r\n     * Inserts a token into the trie.\r\n     */\r\n    Trie.prototype.insert = function (word, score, index) {\r\n        var node = this.root;\r\n        var symbols = stringToChars(word);\r\n        for (var i = 0; i < symbols.length; i++) {\r\n            if (!node.children[symbols[i]]) {\r\n                node.children[symbols[i]] = new TrieNode();\r\n                node.children[symbols[i]].parent = node;\r\n                node.children[symbols[i]].word[0] = node.word[0].concat(symbols[i]);\r\n            }\r\n            node = node.children[symbols[i]];\r\n            if (i === symbols.length - 1) {\r\n                node.end = true;\r\n                node.word[1] = score;\r\n                node.word[2] = index;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns an array of all tokens starting with ss.\r\n     *\r\n     * @param ss The prefix to match on.\r\n     */\r\n    Trie.prototype.commonPrefixSearch = function (ss) {\r\n        var output = [];\r\n        var node = this.root.children[ss[0]];\r\n        for (var i = 0; i < ss.length && node; i++) {\r\n            if (node.end) {\r\n                output.push(node.word);\r\n            }\r\n            node = node.children[ss[i + 1]];\r\n        }\r\n        if (!output.length) {\r\n            output.push([[ss[0]], 0, 0]);\r\n        }\r\n        return output;\r\n    };\r\n    return Trie;\r\n}());\r\nexport { Trie };\r\n//# sourceMappingURL=trie.js.map","map":"{\"version\":3,\"file\":\"trie.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/tokenizer/trie.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAC,aAAa,EAAC,MAAM,SAAS,CAAC;AAKtC;IAME;QACE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACzB,CAAC;IACH,eAAC;AAAD,CAAC,AAZD,IAYC;AAED;IAGE;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,QAAQ,EAAE,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,qBAAM,GAAN,UAAO,IAAY,EAAE,KAAa,EAAE,KAAa;QAC/C,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAErB,IAAM,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;QAEpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC9B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,QAAQ,EAAE,CAAC;gBAC3C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;gBACxC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;aACrE;YAED,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,KAAK,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC5B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;gBAChB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;gBACrB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;aACtB;SACF;IACH,CAAC;IAED;;;;OAIG;IACH,iCAAkB,GAAlB,UAAmB,EAAY;QAC7B,IAAM,MAAM,GAAiB,EAAE,CAAC;QAChC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAErC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,IAAI,IAAI,EAAE,CAAC,EAAE,EAAC;YACzC,IAAI,IAAI,CAAC,GAAG,EAAC;gBAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAAE;YACxC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SACjC;QAED,IAAI,CAAC,MAAM,CAAC,MAAM,EAAC;YAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SAAE;QAEpD,OAAO,MAAM,CAAC;IAChB,CAAC;IACH,WAAC;AAAD,CAAC,AAjDD,IAiDC\"}","dts":{"name":"/Users/igorstojanov/code/evaluations/tfjs-models/universal-sentence-encoder/tokenizer/trie.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\ndeclare type OutputNode = [string[], number, number];\r\ndeclare class TrieNode {\r\n    parent: TrieNode;\r\n    end: boolean;\r\n    children: {\r\n        [firstSymbol: string]: TrieNode;\r\n    };\r\n    word: OutputNode;\r\n    constructor();\r\n}\r\nexport declare class Trie {\r\n    root: TrieNode;\r\n    constructor();\r\n    /**\r\n     * Inserts a token into the trie.\r\n     */\r\n    insert(word: string, score: number, index: number): void;\r\n    /**\r\n     * Returns an array of all tokens starting with ss.\r\n     *\r\n     * @param ss The prefix to match on.\r\n     */\r\n    commonPrefixSearch(ss: string[]): OutputNode[];\r\n}\r\nexport {};\r\n"}}
