{"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport * as tfconv from '@tensorflow/tfjs-converter';\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { loadTokenizer, loadVocabulary, Tokenizer } from './tokenizer';\r\nimport { loadQnA } from './use_qna';\r\nexport { version } from './version';\r\nvar BASE_PATH = 'https://storage.googleapis.com/tfjs-models/savedmodel/universal_sentence_encoder';\r\nexport function load(config) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var use;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    use = new UniversalSentenceEncoder();\r\n                    return [4 /*yield*/, use.load(config)];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/, use];\r\n            }\r\n        });\r\n    });\r\n}\r\nvar UniversalSentenceEncoder = /** @class */ (function () {\r\n    function UniversalSentenceEncoder() {\r\n    }\r\n    UniversalSentenceEncoder.prototype.loadModel = function (modelUrl) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                return [2 /*return*/, modelUrl\r\n                        ? tfconv.loadGraphModel(modelUrl)\r\n                        : tfconv.loadGraphModel('https://tfhub.dev/tensorflow/tfjs-model/universal-sentence-encoder-lite/1/default/1', { fromTFHub: true })];\r\n            });\r\n        });\r\n    };\r\n    UniversalSentenceEncoder.prototype.load = function (config) {\r\n        if (config === void 0) { config = {}; }\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _a, model, vocabulary;\r\n            return tslib_1.__generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, Promise.all([\r\n                            this.loadModel(config.modelUrl),\r\n                            loadVocabulary(config.vocabUrl || BASE_PATH + \"/vocab.json\")\r\n                        ])];\r\n                    case 1:\r\n                        _a = _b.sent(), model = _a[0], vocabulary = _a[1];\r\n                        this.model = model;\r\n                        this.tokenizer = new Tokenizer(vocabulary);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * Returns a 2D Tensor of shape [input.length, 512] that contains the\r\n     * Universal Sentence Encoder embeddings for each input.\r\n     *\r\n     * @param inputs A string or an array of strings to embed.\r\n     */\r\n    UniversalSentenceEncoder.prototype.embed = function (inputs) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var encodings, indicesArr, flattenedIndicesArr, i, indices, values, modelInputs, embeddings;\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (typeof inputs === 'string') {\r\n                            inputs = [inputs];\r\n                        }\r\n                        encodings = inputs.map(function (d) { return _this.tokenizer.encode(d); });\r\n                        indicesArr = encodings.map(function (arr, i) { return arr.map(function (d, index) { return [i, index]; }); });\r\n                        flattenedIndicesArr = [];\r\n                        for (i = 0; i < indicesArr.length; i++) {\r\n                            flattenedIndicesArr =\r\n                                flattenedIndicesArr.concat(indicesArr[i]);\r\n                        }\r\n                        indices = tf.tensor2d(flattenedIndicesArr, [flattenedIndicesArr.length, 2], 'int32');\r\n                        values = tf.tensor1d(tf.util.flatten(encodings), 'int32');\r\n                        modelInputs = { indices: indices, values: values };\r\n                        return [4 /*yield*/, this.model.executeAsync(modelInputs)];\r\n                    case 1:\r\n                        embeddings = _a.sent();\r\n                        indices.dispose();\r\n                        values.dispose();\r\n                        return [2 /*return*/, embeddings];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return UniversalSentenceEncoder;\r\n}());\r\nexport { UniversalSentenceEncoder };\r\nexport { Tokenizer };\r\nexport { loadTokenizer };\r\nexport { loadQnA };\r\n//# sourceMappingURL=index.js.map","map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/igorstojanov/code/evaluations/tfjs-models/universal-sentence-encoder/index.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport * as tfconv from '@tensorflow/tfjs-converter';\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { loadTokenizer, Tokenizer } from './tokenizer';\r\nimport { loadQnA } from './use_qna';\r\nexport { version } from './version';\r\ninterface LoadConfig {\r\n    modelUrl?: string;\r\n    vocabUrl?: string;\r\n}\r\nexport declare function load(config?: LoadConfig): Promise<UniversalSentenceEncoder>;\r\nexport declare class UniversalSentenceEncoder {\r\n    private model;\r\n    private tokenizer;\r\n    loadModel(modelUrl?: string): Promise<tfconv.GraphModel>;\r\n    load(config?: LoadConfig): Promise<void>;\r\n    /**\r\n     *\r\n     * Returns a 2D Tensor of shape [input.length, 512] that contains the\r\n     * Universal Sentence Encoder embeddings for each input.\r\n     *\r\n     * @param inputs A string or an array of strings to embed.\r\n     */\r\n    embed(inputs: string[] | string): Promise<tf.Tensor2D>;\r\n}\r\nexport { Tokenizer };\r\nexport { loadTokenizer };\r\nexport { loadQnA };\r\n"}}
